DEFINITION MODULE TextBuffers;

        (********************************************************)
        (*                                                      *)
        (*        Text buffers for line-oriented file input     *)
        (*                                                      *)
        (*          (At present we support only input)          *)
        (*                                                      *)
        (*   This module maintains a read-ahead buffer for each *)
        (*   open file.  Obviously it will be efficient to do   *)
        (*   this only if input is mostly sequential.           *)
        (*                                                      *)
        (*  Programmer:         P. Moylan                       *)
        (*  Started:            16 July 2001                    *)
        (*  Last edited:        5 November 2001                 *)
        (*  Status:             OK                              *)
        (*                                                      *)
        (********************************************************)


FROM SYSTEM IMPORT LOC;
FROM FileOps IMPORT FilePos;

(************************************************************************)

TYPE
    Buffer;               (* is private *)

(************************************************************************)
(*                           OPEN/CLOSE/ETC                             *)
(************************************************************************)

PROCEDURE OpenForReading (name: ARRAY OF CHAR): Buffer;

    (* Opens an existing file for read-only access, and returns its     *)
    (* buffer ID.                                                       *)

PROCEDURE TBFileOpened (TB: Buffer): BOOLEAN;

    (* Use this to check whether an 'open' operation succeeded. *)

PROCEDURE CloseTB (VAR (*INOUT*) TB: Buffer);

    (* Closes a file. *)

(************************************************************************)
(*                         FILE POSITION/SIZE                           *)
(************************************************************************)

PROCEDURE TBCurrentPosition (TB: Buffer): FilePos;

    (* Returns the current position within the file. *)

PROCEDURE TBStartPosition (TB: Buffer): FilePos;

    (* Returns the start-of-file position. *)

PROCEDURE TBEndPosition (TB: Buffer): FilePos;

    (* Returns the end-of-file position. *)

PROCEDURE TBSetPosition (TB: Buffer;  position: FilePos);

    (* Sets the current position within the file. *)

(************************************************************************)
(*                              INPUT                                   *)
(************************************************************************)

PROCEDURE TBReadRaw (TB: Buffer;  VAR (*OUT*) data: ARRAY OF LOC;
                   limit: CARDINAL;  VAR (*OUT*) NumberRead: CARDINAL);

    (* Reads a buffer-full of information from a file. *)

PROCEDURE TBReadLine (TB: Buffer;  VAR (*OUT*) data: ARRAY OF CHAR);

    (* Reads a line of text from a file.  Assumption: a line ends with  *)
    (* CRLF.  To avoid tortuous logic, I take the CR as end of line and *)
    (* skip the LF.  At end of file we return with data[0] = Ctrl/Z.    *)

END TextBuffers.

